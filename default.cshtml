<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<meta charset="utf-8" />
<head>
    <title>Facebook Post Browser</title>
    <script src="//ajax.aspnetcdn.com/ajax/jquery/jquery-1.7.1.min.js"></script>
    <meta name="description" content="Facebook Post Browser enables you to browse and bulk download Facebook posts for offline access. It currently supports posts created on Facebook Pages and Groups, and allows you to specify a date range of posts to load." />
    <meta name="keywords" content="facebook, facebook posts, facebook groups, facebook pages, 
    facebook export, facebook download, facebook save, facebook research, facebook browse, facebook post export, facebook post save, facebook post download" /> 
</head>
<body>
<div id="fb-root"></div>
<script>
  // This is called with the results from from FB.getLoginStatus().
  function statusChangeCallback(response) {
    console.log('statusChangeCallback');
    console.log(response);
    // The response object is returned with a status field that lets the
    // app know the current login status of the person.
    // Full docs on the response object can be found in the documentation
    // for FB.getLoginStatus().
    if (response.status === 'connected') {
      // Logged into your app and Facebook.
      testAPI();
      enableControls();
    } else if (response.status === 'not_authorized') {
      // The person is logged into Facebook, but not your app.
      document.getElementById('status').innerHTML = 'Please log ' +
        'into this app.';
    } else {
      // The person is not logged into Facebook, so we're not sure if
      // they are logged into this app or not.
      document.getElementById('status').innerHTML = 'Please log ' +
        'into Facebook.';
    }
  }

  // This function is called when someone finishes with the Login
  // Button.  See the onlogin handler attached to it in the sample
  // code below.
  function checkLoginState() {
    FB.getLoginStatus(function(response) {
      statusChangeCallback(response);
    });
  }

  window.fbAsyncInit = function() {
  FB.init({
    appId      : '@System.Configuration.ConfigurationManager.AppSettings["appId"]', // App ID
    cookie     : true,  // enable cookies to allow the server to access 
                        // the session
    xfbml      : true,  // parse social plugins on this page
    version    : 'v2.1' // use version 2.1
  });

  // Now that we've initialized the JavaScript SDK, we call 
  // FB.getLoginStatus().  This function gets the state of the
  // person visiting this page and can return one of three states to
  // the callback you provide.  They can be:
  //
  // 1. Logged into your app ('connected')
  // 2. Logged into Facebook, but not your app ('not_authorized')
  // 3. Not logged into Facebook and can't tell if they are logged into
  //    your app or not.
  //
  // These three cases are handled in the callback function.

  FB.getLoginStatus(function(response) {
    statusChangeCallback(response);
  });

  };

  // Load the SDK asynchronously
  (function(d, s, id) {
    var js, fjs = d.getElementsByTagName(s)[0];
    if (d.getElementById(id)) return;
    js = d.createElement(s); js.id = id;
    js.src = "//connect.facebook.net/en_US/sdk.js";
    fjs.parentNode.insertBefore(js, fjs);
  }(document, 'script', 'facebook-jssdk'));

  // Here we run a very simple test of the Graph API after login is
  // successful.  See statusChangeCallback() for when this call is made.
  function testAPI() {
    console.log('Welcome!  Fetching your information.... ');
    FB.api('/me', function(response) {
      console.log('Successful login for: ' + response.name);
    });
  }
</script>

<!--
  Below we include the Login Button social plugin. This button uses
  the JavaScript SDK to present a graphical Login button that triggers
  the FB.login() function when clicked.
-->

<h1>Facebook Post Browser</h1>
<p>This tool enables you to browse and bulk download Facebook posts for offline access. It currently supports posts created on Facebook Pages and Groups, and allows you to specify a date range of posts to load. <strong>Please log in with your Facebook account by pressing the button below to get started.</strong></p>
<div class="fb-login-button" data-max-rows="1" data-size="medium" data-show-faces="true" data-auto-logout-link="false" scope="user_groups" onlogin="checkLoginState();"></div>
<br /> 
<fieldset id="controls">
  <label for="objectType">Facebook Group or Page</label>
  <select id="objectType" disabled="disabled">
      <option value="group">Group</option>
      <option value="page">Page</option>
  </select>
  <br/>
  <label for="objectName">Name</label>
  <input type="text" id="objectName" value="شباب 6 ابريل .. APRIL 6 YOUTH MOVEMENT" disabled="disabled"/>
  <br />
  <label for="startDate">Start date (UTC time)</label>
  <input type="text" id="startDate" value="Jan 1, 2008" disabled="disabled"/>
  <br />
  <label for="endDate">End date (UTC time)</label>
  <input type="text" id="endDate" value="Mar 25, 2008" disabled="disabled" />
  <br />
  <label for="numPosts">Number of posts</label>
  <input type="text" id="numPosts" value="1000" disabled="disabled" />
  <br />
  <input type="button" id="submit" value="Submit" disabled="disabled"/>
</fieldset>
<p>Looking at <span id="resultCount">0</span> results</p>
<ul id="posts">
</ul>
<script src="js/logic.js" type="text/javascript"></script>
<script type="text/javascript">

    $(function () {
      $("#submit").click(function () {
        
        loadObjectId($("#objectName").val(), 
          $("#objectType").val(), 
          objectIdLoaded);
      });
    });

    function objectIdLoaded(loadObjectIdError, objectId) {    
      setCursorToProgress();

      if(!loadObjectIdError){
        loadPosts(Date.parse($("#startDate").val()), 
          Date.parse($("#endDate").val()), $("#numPosts").val(), objectId, 
          $("#objectType").val(), loadCompleted);
      } else {
        setCursorToDefault();
        alert(loadObjectIdError.message);
      }
    }

    function loadCompleted(loadPostsError, posts){
      setCursorToDefault();

      if(!loadPostsError){
        $("#posts").empty();
        $("#resultCount").html(posts.length);
        $.each(posts, function (index, value) {
          $("#posts").append("<li><strong>" + value.created_time + ":</strong> "
            + value.message + "</li>");
        });
      } else {
        alert(loadPostsError.message);
      }
    }

    function enableControls(){
      $("#controls input, select").removeAttr("disabled");
    }

    function setCursorToProgress(){
      // Make cursor wait
      $("body").css("cursor", "progress");
    }

    function setCursorToDefault(){
      // Change cursor back
      $("body").css("cursor", "default"); 
    }

</script>
</body>
</html>
